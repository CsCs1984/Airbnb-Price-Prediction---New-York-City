# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-av2ncPfoSczgnz0saEk7Y0qRXxUPkM1
"""

import pandas as pd

# قراءة بيانات Kaggle
df = pd.read_csv("/content/sample_data/new_york_listings_2024.csv")

# عرض أول 5 صفوف
df.head()

"""Data Cleaning"""

# تحويل السعر إلى رقم
df['price'] = df['price'].replace('[\$,]', '', regex=True).astype(float)

# إزالة الأسعار الغير منطقية
df = df[(df['price'] >= 20) & (df['price'] <= 1000)]

# إزالة minimum_nights الغير منطقية
df = df[df['minimum_nights'] <= 365]

# حذف القيم الفارغة
df.dropna(subset=['price', 'room_type', 'neighbourhood'], inplace=True)

print("Shape after cleaning:", df.shape)

"""Explority Data Analysis"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,6))
sns.histplot(df['price'], bins=50, kde=True)
plt.title("Price Distribution - Airbnb NYC")
plt.show()

plt.figure(figsize=(8,5))
sns.barplot(x='room_type', y='price', data=df)
plt.title("Average Price by Room Type")
plt.show()

top_neigh = df.groupby('neighbourhood')['price'].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(10,6))
top_neigh.plot(kind='bar')
plt.title("Top 10 Expensive Neighbourhoods")
plt.show()

"""Model Training"""

# اختيار الأعمدة المهمة فقط
df_model = df[['price', 'room_type', 'neighbourhood', 'minimum_nights', 'number_of_reviews']]

# تحويل النصوص إلى أرقام
df_model = pd.get_dummies(df_model, columns=['room_type', 'neighbourhood'], drop_first=True)

# تقسيم البيانات
from sklearn.model_selection import train_test_split
X = df_model.drop('price', axis=1)
y = df_model['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# تدريب النموذج
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# التنبؤ
y_pred = model.predict(X_test)

# التقييم
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")

"""Price Prediction"""

sample = X_test.iloc[0:1]
predicted_price = model.predict(sample)
print("Predicted Price:", predicted_price)

"""RandomForest Model"""

# 1. تجهيز الداتا للنموذج
df_model = df[['price', 'room_type', 'neighbourhood', 'minimum_nights', 'number_of_reviews']]

# One-Hot Encoding للأعمدة النصية
df_model = pd.get_dummies(df_model, columns=['room_type', 'neighbourhood'], drop_first=True)

# تقسيم X و y
X = df_model.drop('price', axis=1)
y = df_model['price']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. تدريب RandomForest
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

rf_model = RandomForestRegressor(
    n_estimators=200,      # عدد الأشجار
    max_depth=20,         # عمق كل شجرة (ممكن نخليه None)
    random_state=42,
    n_jobs=-1             # استخدام كل المعالجات
)
rf_model.fit(X_train, y_train)

# 3. التقييم
y_pred = rf_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")

"""Price prediction"""

# ناخذ أول عينة من بيانات الاختبار كتجربة
sample = X_test.iloc[0:1]
predicted_price = rf_model.predict(sample)
print("Predicted Price for sample:", predicted_price[0])

"""Feature Importance"""

import matplotlib.pyplot as plt
import numpy as np

# استخراج أهمية الخصائص
feature_importance = rf_model.feature_importances_
features = X.columns

# ترتيبها تنازليًا
sorted_idx = np.argsort(feature_importance)[::-1]
sorted_features = features[sorted_idx]
sorted_importance = feature_importance[sorted_idx]

# رسمها
plt.figure(figsize=(10,6))
plt.barh(sorted_features[:15], sorted_importance[:15])  # نعرض فقط أهم 15 ميزة
plt.xlabel("Feature Importance")
plt.title("Top Features affecting Airbnb Price")
plt.gca().invert_yaxis()
plt.show()